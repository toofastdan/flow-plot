'''
Plots scatterplots and heatmaps of protein expression from individual cells from csv files generated by the FlowJo software.
@author: Daniel Brock - "toofastdan"
Last updated: 12/12/2019
 '''



# Step 1:  Importing the necessary tools for running this analysis.  We need graphics tools:  seaborn and matplotlib.
# We also need to import the CSV module for efficient importing of our large CSV files.  We need pandas to convert
# strings into floats.

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import csv

# Step 2:  Setting up the file path to your CSV files and testing if python can parse them.  Replace the default file
# path with the file path specific to your computer.  Data type should be in floats with the exception of the headers.

events = pd.read_csv("C:/Users/ToofastDan/flow-plot/flow-plot/FlowJo Sample CSV Files/export_mouse derived MSCs_BM adh Hx_005_Live_dead.csv")
print(events.head())
print(events.dtypes)

# this shows the total cell count per csv file
number_of_events = len(events)
print((number_of_events))

# test to see if the datatypes are floats.  This method only works with floats
for column in events:
    assert events[column].dtypes == np.float64
print("columns are floats :D")

#Step 3:  Setting up the scatterplots using seaborn and matplotlib.  x and y refer to column headers in your csv file.

# Setting the default styling and colors for the following graphs (I want a white background with no gridlines):
sns.set(style="white")
sns.set_palette("bright")

# Scatterplot for FSC-A vs SSC-A (for control)
f, ax = plt.subplots(figsize=(10,10))                       # this is the size of the graph
ax = sns.scatterplot(x='FSC-A', y='SSC-A', data=events)     # x and y axes from the imported csv file
ax.set_title("FSC vs SSC")                                  #this is the title of the graph
plt.savefig("C:/Users/ToofastDan/Desktop/flow-plot/figures/FSC-A vs SSC-A.png", bbox_inches="tight", transparent=True)
                                                            # saving a png image of the generated graph to a specified folder
plt.show()                                                  # displaying the graph

# Scatterplot for FSC-A vs FSC-H (living cells should form a linear line here) - this plot is optional because not all
# FlowJo files come with this type of data.  Uncheck if you have FSC-H
#f, ax = plt.subplots(figsize=(10,10))
#ax = sns.scatterplot(x='FSC-A', y="FSC-H", data=events)
#ax.set_title("FSC-A vs FSC-H")
#plt.savefig("C:/Users/ToofastDan/Desktop/flow-plot/figures/FSC-A vs FCS-H.png", bbox_inches="tight", transparent=True)
#plt.show()

# Scatterplot for some proteins of interest:
f, ax = plt.subplots(figsize=(10,10))
ax = sns.scatterplot(x='APC-Cy7-A :: TER119-CD45', y='Pacific Blue-A :: CD31', data=events)
ax.set_title("Ter119/CD45 vs CD31")

ax.set(xlim=(10,50000), ylim=(50,3000))     #setting the x and y axis to log scale - better for viewing protein data
ax.set_xscale('log')
ax.set_yscale('log')

plt.savefig("C:/Users/ToofastDan/Desktop/flow-plot/figures/Ter119_CD45 vs CD31.png", bbox_inches="tight", transparent=True)
plt.show()

# Step 4:  Setting up the heatmaps using seaborn and matplotlib to get a better idea how the expression of multiple
#proteins correlate with one another

# creating a dataframe which includes only the relevant protein expression data.  numbers: 2:10 correspond to columns
# in the csv file
df = pd.DataFrame(events)
df_trimmed = df.iloc[:,2:10]
#print(df_trimmed.head())       # this is used to see if your column selection was correct

plt.figure(figsize=(17,7))
sns.heatmap(df_trimmed.corr(), annot=True, linewidth=0.3, cmap='Blues')
ax.set_title("Heatmap of Protein Expression")
plt.savefig("C:/Users/ToofastDan/Desktop/flow-plot/figures/heatmap.png", bbox_inches="tight", transparent=True)
plt.show()

# Step 5:  Plotting the average protein expression

# Displays a bar graph of each protein's mean expression levels with standard deviation as the error bars
f, ax = plt.subplots(figsize=(12,7))
ax = sns.barplot(data=df_trimmed, palette="winter_r")       #setting up the parameters for a barplot
ax.set_xticklabels(ax.get_xticklabels(), rotation=90)       #modifying the barplot x axis labels so that they don't overlap
ax.set(xlabel='Protein', ylabel='Expression Intensity')     #labelling the x and y axes
ax.set_title("Mean Protein Expression Levels")              #title of barplot
plt.savefig("C:/Users/ToofastDan/Desktop/flow-plot/figures/barplot.png", bbox_inches="tight", transparent=True)
plt.show()

# This is a quick function made to easily see the means for each column in the csv file - corresponding to each protein
def mean_calc(df_mean):
    '''function that calculates the mean of each column in the csv file'''
    df_mean = pd.DataFrame([df_trimmed.mean()])
    return(df_mean)
print(mean_calc(events))

# Done!!! (for the time being)